#!/usr/bin/env python3

import sys
import os
import base64
import binascii
import struct
import argparse
import pwd
import subprocess
import secrets
import string
import socket
import shutil
import glob

import yaml


__author__ = 'Andrew Williams <nikdoof@dimension.sh>'
__version__ = '1.2.0'

VALID_SSH_KEYTYPES = [
    'sk-ecdsa-sha2-nistp256@openssh.com',
    'ecdsa-sha2-nistp256',
    'ecdsa-sha2-nistp384',
    'ecdsa-sha2-nistp521',
    'sk-ssh-ed25519@openssh.com',
    'ssh-ed25519',
    'ssh-rsa',
]


def validate_sshkey(keystring):
    """ Validates that SSH pubkey string is valid """
    # do we have 3 fields?
    fields = len(keystring.split(' '))
    if fields < 2:
        return 'Incorrect number of fields (%d)' % fields
    else:
        fsplit = keystring.split(' ')
        keytype = fsplit[0]
        pubkey = fsplit[1]

    # Check it is a valid type
    if not keytype in VALID_SSH_KEYTYPES:
        return 'Invalid keytype'

    # Decode the key data from Base64
    try:
        data = base64.decodebytes(pubkey.encode())
    except binascii.Error:
        return 'Error decoding the pubkey'

    # Get the length from the data
    try:
        str_len = struct.unpack('>I', data[:4])[0]
    except struct.error:
        return 'Error aquiring key length'

    # Keytype is encoded and must match
    if not data[4:4+str_len].decode('ascii') == keytype:
        return 'Embedded keytype does not match declared keytype (%s vs %s)' % (data[4:4+str_len].decode('ascii'), keytype)
    return True


def get_username(username):
    """ Retreives the user from passwd """
    try:
        return pwd.getpwnam(username)
    except KeyError:
        return None


def create_user(username):
    """ Create a user, using 'useradd', then check the results """
    subprocess.run(['useradd', username])
    user = get_username(username)

    # if /etc/skel is a git repo, catch and delete the .git files
    if user:
        git_folder = os.path.join(user.pw_dir, '.git')
        if os.path.exists(git_folder):
            shutil.rmtree(git_folder)

    return user


def generate_password(length=8):
    """ Generates a random password """
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for i in range(length))


def set_user_password(username, password):
    """ Sets a user's password """
    proc = subprocess.Popen(['chpasswd'], stdin=subprocess.PIPE)
    proc.communicate(("%s:%s\n" % (username, password)).encode("utf-8"))


def add_ssh_key(username, sshkey):
    """ Adds the provided SSH key to the user's authorized_keys file """
    user = get_username(username)
    ssh_folder = os.path.join(user.pw_dir, '.ssh')
    key_file = os.path.join(ssh_folder, 'authorized_keys')
    try:
        os.mkdir(ssh_folder)
    except FileExistsError:
        pass
    os.chmod(ssh_folder, 0o700)
    os.chown(ssh_folder, user.pw_uid, user.pw_gid)
    with open(key_file, 'a') as fobj:
        fobj.write(sshkey + '\n')
    os.chown(key_file, user.pw_uid, user.pw_gid)
    os.chmod(key_file, 0o600)


def send_welcome_mail(address, mail_data):
    """ Emails out a welcome email to the user """
    import smtplib
    from email.message import EmailMessage
    from string import Template

    msg = EmailMessage()

    with open(mail_data.get('mail_template', '/etc/mkuser/mail.tmpl')) as fobj:
        content = Template(fobj.read())
    msg.set_content(content.safe_substitute(**mail_data))

    msg['From'] = mail_data.get('mail_from', 'root')
    msg['To'] = address
    msg['Subject'] = mail_data.get('mail_subject', 'Welcome!')

    s = smtplib.SMTP('localhost')
    s.send_message(msg)
    s.quit()

def run_commandset(folder, username):
    """ Runs a set of executables in a folder """
    if os.path.exists(folder) and os.path.isdir(folder):
        for fname in glob.glob(os.path.join(os.path.abspath(folder),'*')):
            if os.path.isfile(fname) and os.access(fname, os.X_OK):
                subprocess.call([fname, username])

def main():
    parser = argparse.ArgumentParser('mkuser')
    parser.add_argument('username', help='Username of the new user')
    parser.add_argument('email', help='Email address to send the welcome mail to')
    parser.add_argument('sshkey', help='SSH public key')
    parser.add_argument('-c', '--config', help='Location of the configuration file to use', default='/etc/mkuser/mkuser.yaml')
    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)

    args = parser.parse_args()

    if os.getuid() != 0:
        sys.stderr.write('This script requires root access')
        sys.exit(1)

    config_file = os.path.expandvars(args.config)
    if os.path.exists(config_file):
        with open(config_file, 'r') as fobj:
            config = yaml.load(fobj)
    else:
        sys.stderr.write('%s does not exist, exiting...' % config_file)
        sys.exit(1)

    # Check tha the user doesn't exist
    if get_username(args.username):
        sys.stderr.write('User %s already exists\n' % args.username)
        sys.exit(1)

    if args.sshkey.strip() == '':
        sys.stderr.write('SSH key is blank')
        sys.exit(1)

    res = validate_sshkey(args.sshkey)
    if res != True:
        sys.stderr.write('SSH key invalid: %s' % res)
        sys.exit(1)

    # Run pre-creation commands
    run_commandset(config.get('pre_folder', '/etc/mkuser/pre.d'), args.username)

    # Create the user
    password = generate_password()
    user = create_user(args.username)
    set_user_password(user.pw_name, password)

    # Add the SSH key
    add_ssh_key(user.pw_name, args.sshkey)

    # Send the welcome mail
    mail_data = config.copy()
    mail_data.update({
        'username': user.pw_name,
        'password': password,
        'hostname': socket.getfqdn(),
    })
    for address in (args.email, user.pw_name):
        send_welcome_mail(address, mail_data)

    # Run post-creation commands
    run_commandset(config.get('post_folder', '/etc/mkuser/pre.d'), args.username)

if __name__ == '__main__':
    main()
